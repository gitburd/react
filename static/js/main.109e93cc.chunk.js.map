{"version":3,"sources":["components/CoinFlip.js","components/RandomPlanet.js","App.js","serviceWorker.js","index.js"],"names":["CoinFlip","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","coin","updateState","bind","assertThisInitialized","num","Math","random","console","log","setState","react_default","a","createElement","react_router_dom","react_router","exact","path","className","onClick","Component","fetch","require","RandomPlanet","planet","_this2","floor","concat","then","res","json","name","climate","population","App","render","Fragment","to","CoinFlip_CoinFlip","RandomPlanet_RandomPlanet","React","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.109e93cc.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route, Link}  from 'react-router-dom'\n\n\nexport default class CoinFlip extends Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n           coin: ''\n        }\n        this.updateState = this.updateState.bind(this);\n     };\n     updateState() {\n   \n       let num = Math.random()*2\n         console.log(num); \n         if(num>1){\n        this.setState({coin: 'Heads'})\n         } else{\n           this.setState({coin: 'Tails'})\n         }\n     }\n\n     render() {\n     return (\n        <Router>\n          <div>\n        <Route exact path='/'/>\n  \n            <div className=\"App\">\n            <header className=\"App-header\">\n            <h1> Coin Flip</h1>\n            <button onClick = {this.updateState}>Click Me!</button>\n            <h2>{this.state.coin}</h2>        \n            </header>\n            </div>\n        \n        </div>\n        </Router>\n      );\n    }\n}\n","import React, { Component } from 'react';\n\nimport { BrowserRouter as Router, Route, Link}  from 'react-router-dom'\n\n\nconst fetch = require('node-fetch');\n\nexport default class RandomPlanet extends Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n           planet: ''\n          \n\n        }\n        this.updateState = this.updateState.bind(this);\n     };\n     updateState() {\n   \n       let num = Math.floor(Math.random()*61)\n    \n         \n        fetch(`https://swapi.co/api/planets/${num}`)\n            .then(res => res.json())\n            .then(json => \n                // console.log(json)\n\n            this.setState({\n                planet: json.name,\n                climate: `The climate is ${json.climate}`,\n                population: `and the population is ${json.population}`\n        })\n        );\n     }\n\n\n     render() {\n        return (\n           <Router>\n             <div>\n           <Route exact path='/'/>\n     \n               <div className=\"App\">\n               <header className=\"App-header\">\n               <h1> Random Planet!</h1>\n               <button onClick = {this.updateState}>Click Me!</button>\n               <h1>{this.state.planet}</h1>\n               <h3> {this.state.climate} </h3>\n               <h3> {this.state.population}</h3>        \n               </header>\n               </div>\n           \n           </div>\n           </Router>\n         );\n       }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Link}  from 'react-router-dom'\nimport CoinFlip from './components/CoinFlip';\nimport RandomPlanet from './components/RandomPlanet';\n\n\nclass App extends React.Component {\n  constructor(props) {\n     super(props);\n     \n     this.state = {\n        coin: ''\n     }\n     this.updateState = this.updateState.bind(this);\n  };\n  updateState() {\n\n    let num = Math.random()*2\n      console.log(num); \n      if(num>1){\n     this.setState({coin: 'Heads'})\n      } else{\n        this.setState({coin: 'Tails'})\n      }\n  }\n  \n   \n  \n  render() {\n\n    \n    return (\n      <Router>\n        <div>\n        <Route path=\"/\" exact render = { props =>(\n            <React.Fragment>\n          <header className=\"App-header\">\n        \n          <h1> Welcome!</h1>    \n          <ul>\n          \n            <li>\n          <Link to ='/coinflip'>\n          Flip a Coin! \n          </Link>\n          </li>\n\n          <li>\n          <Link to ='/planet'>\n          Get a Random Planet! \n          </Link>\n          </li>\n          </ul>\n          </header>\n          </React.Fragment>)} />\n\n         \n\n          <Route path=\"/coinflip\" exact render = { props =>(\n            <React.Fragment>\n               <ul>\n          <li>\n          <Link to ='/'>\n          Home \n          </Link>\n          </li>\n            <li>\n          <Link to ='/coinflip'>\n          Flip a Coin! \n          </Link>\n          </li>\n\n          <li>\n          <Link to ='/planet'>\n          Get a Random Planet! \n          </Link>\n          </li>\n          </ul>\n          <header className=\"App-header\">\n          \n          <CoinFlip/>\n          </header>\n          </React.Fragment>)} />\n\n\n          <Route path=\"/planet\" exact render = { props =>(\n            <React.Fragment>\n               <ul>\n          <li>\n          <Link to ='/'>\n          Home \n          </Link>\n          </li>\n            <li>\n          <Link to ='/coinflip'>\n          Flip a Coin! \n          </Link>\n          </li>\n\n          <li>\n          <Link to ='/planet'>\n          Get a Random Planet! \n          </Link>\n          </li>\n          </ul>\n          <header className=\"App-header\">\n          <RandomPlanet/>\n          </header>\n          </React.Fragment>)} />\n       \n\n      \n      </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}